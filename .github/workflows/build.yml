name: Build and push image

on:
  pull_request:
    branches:
      - "main"
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push image
    runs-on: [self-hosted, build]
    outputs:
      version: ${{ steps.build.version.outputs.version }}
    permissions:
      contents: write
      packages: write

    steps:
      # - name: Clear up some disk space
        #run: |
         # sudo rm -rf /usr/share/dotnet
          #sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          #df -h

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: |
            /tmp/.buildx-cache/cache/test
            /tmp/.buildx-cache/cache/latest
            /tmp/.buildx-cache/cache-new/test
            /tmp/.buildx-cache/cache-new/latest
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test build
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./build/docker/agent/Dockerfile
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:test
          cache-from: type=local,src=/tmp/.buildx-cache/cache/test/
          cache-to: type=local,dest=/tmp/.buildx-cache/cache-new/test/,mode=max
          build-args: |
            USERNAME=paf
            USER_UID=1000
            USER_GID=1000

      - name: Build and push Docker image
        id: build
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./build/docker/agent/Dockerfile
          push: true
          # tag 'latest' and version on push to main, otherwise use the commit hash
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache/cache/latest/
          cache-to: type=local,dest=/tmp/.buildx-cache/cache-new/latest/,mode=max
          build-args: |
            USERNAME=paf
            USER_UID=1000
            USER_GID=1000

      - name: Save pull request artifact
        if: github.event_name == 'pull_request'
        env:
          PR_ID: ${{ github.event.number }}
        run: |
          mkdir -p ./artifact
          printf '{
            "is_pr": true,
            "pr_id": $PR_ID
          }' >> ./artifact/artifact.json

      - name: Save merge artifact
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p ./artifact
          printf '{
            "is_pr": false,
            "pr_id": -1
          }' >> ./artifact/artifact.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ./artifact/artifact.json
          retention-days: 1

      - name: Clean up PR cache
        if: github.event_name == 'pull_request'
        run: |
          rm -rf /tmp/.buildx-cache/cache/test
          mv /tmp/.buildx-cache/cache-new/test /tmp/.buildx-cache/cache/test
      
      - name: Clean up merge cache
        if: github.event_name != 'pull_request'
        run: |
          rm -rf /tmp/.buildx-cache/cache/latest
          mv /tmp/.buildx-cache/cache-new/latest /tmp/.buildx-cache/cache/latest
      
      - name: Prune all images older than 1 days from self-hosted runner
        run: docker image prune -a -f --filter "until=24h"