name: Build, publish and run tests

on:
  push:
    branches: [ 'main' ]
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build.version.outputs.version }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and push tag
        # only run on push to main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main

      - name: Get commit hash
        id: hash
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./build/docker/build/Dockerfile
          push: true
          # tag 'latest' and version on push to main, otherwise use the commit hash
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.new_version == '' && steps.hash.outputs.hash || steps.tag.outputs.new_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'latest' || steps.hash.outputs.hash }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output version
        id: version
        # take either the created tag or the commit hash
        run: echo "::set-output name=version::${{ steps.tag.outputs.new_version == '' && steps.hash.outputs.hash || steps.tag.outputs.new_version }}"
  drive:
    runs-on: self-hosted
    needs: build-and-push-image
    # run only on pull request for now
    if: github.event_name == 'pull_request'
    env:
      AGENT_VERSION: ${{ needs.build-and-push-image.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run docker-compose
        run: docker-compose -f ./build/docker-compose.test.yml up --exit-code-from agent
      - name: Copy results
        run: docker-compose -f docker-compose.test.yml cp agent:/tmp/simulation_results.json .
      - name: Stop docker-compose
        run: docker-compose -f ./build/docker-compose.test.yml down -v
      # add rendered JSON as comment to the pull request
      - name: Add simulation results as comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # this script reads the simulation_results.json and creates a comment on the pull request with the results.
          script: |
            const fs = require('fs');
            const path = require('path');
            // read the simulation results
            const results = fs.readFileSync(join(__dirname, 'simulation_results.json'), 'utf8');
            resultsJson = JSON.parse(results);
            // create a markdown list of the results
            resultsList = resultsJson.results.map((result, i) => {
              return `- ${resultsJson.labels[i]}: ${result}`;
            });
            // create a markdown table of the results
            resultsTable = resultsJson.results.map((result, i) => {
              return `| ${resultsJson.labels[i]} | ${result} |`;
            });
            // create a markdown table header
            resultsTableHeader = `| Metric | Value |`;
            // create a markdown table divider
            resultsTableDivider = `| --- | --- |`;
            // create a markdown table of the results
            resultsTable = resultsTableHeader + '\n' + resultsTableDivider + '\n' + resultsTable.join('\n');
            // add the results as a comment to the pull request
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "## Simulation results\n" + resultsList.join("\n") + "\n\n## Simulation results table \n" + resultsTable
            })



